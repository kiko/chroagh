#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a distro-specific bootstrap script, sourced from main.sh, and as such
# has access to all of the variables set by main.sh, namely $tmp (the temporary
# directory), $INSTALLERDIR/$DISTRO, $RELEASE, $ARCH, and $MIRROR.

# FIXME: We may want to detect dependencies automatically

# This code has been adapted from a script found on the Arch Linux Wiki:
# https://wiki.archlinux.org/index.php/Install_from_Existing_Linux

REPOS='core community extra'

if [ "$ARCH" = 'armv7h' ]; then
    REPOS="$REPOS alarm aur"
fi

# Packages to install in the bootstrap chroot
PACKAGES_BOOTSTRAP="acl attr bzip2 curl expat glibc gpgme libarchive libassuan \
libgpg-error libssh2 openssl pacman xz zlib pacman-mirrorlist coreutils bash \
grep gawk file tar ncurses readline libcap util-linux pcre gcc-libs lzo2 \
arch-install-scripts"

# Packages to install in the target 
PACKAGES_TARGET="bash bzip2 coreutils cryptsetup diffutils file filesystem \
findutils gawk gcc-libs gettext glibc grep gzip heirloom-mailx inetutils \
iproute2 iputils less licenses man-db man-pages nano pacman pacman-mirrorlist \
perl procps-ng psmisc sed shadow sysfsutils tar texinfo usbutils util-linux \
vi which"

LIST="$tmp/list"
FETCHDIR="$tmp/packages"
BOOTSTRAPCHROOT="$tmp/$subdir"

mkdir "$FETCHDIR" "$BOOTSTRAPCHROOT"

echo "Fetching repository packages list..."
# Create a list of URLs for each Arch package
for REPO in $REPOS; do
    echo "Fetching $REPO..."
    MIRRORBASE="`echo $MIRROR | sed -e "s/\\$repo/$REPO/" -e "s/\\$arch/$ARCH/"`"
    # Add trailing slash to fix redirect on some mirrors.
    wget -O "$FETCHDIR/$REPO.list" "$MIRRORBASE"/
    cat "$FETCHDIR/$REPO.list" \
        | sed -n "s|.*href=\"\\([^\"]*\\).*|$MIRRORBASE/\\1|p" \
        | grep -v 'sig$' | uniq > "$FETCHDIR/$REPO.pkg"
    if [ "`cat \"$FETCHDIR/$REPO.pkg\" | wc -l`" -eq 0 ]; then
        error 2 "Cannot fetch $MIRRORBASE."
    fi
    cat "$FETCHDIR/$REPO.pkg" >> $LIST
    rm "$FETCHDIR/$REPO.list" "$FETCHDIR/$REPO.pkg"
done

echo "Downloading and extracting packages..."
for PACKAGE in $PACKAGES_BOOTSTRAP; do
    URL="`grep "$PACKAGE-[0-9]" $LIST | head -n1`"
    if [ -z "$URL" ]; then
        error 2 "Cannot find package $PACKAGE"
    fi
    FILE="`echo $URL | sed 's/.*\/\([^\/][^\/]*\)$/\1/'`"
    wget "$URL" -c -O "$FETCHDIR/$FILE" 
    tar xfk "$FETCHDIR/$FILE" -C "$BOOTSTRAPCHROOT"
done
        
# Copy package tarballs for faster 2nd stage installation
mkdir -p "$BOOTSTRAPCHROOT/var/cache/pacman/pkg"
mv $FETCHDIR/* $BOOTSTRAPCHROOT/var/cache/pacman/pkg

# Hash for empty password, created by doing:
# $ openssl passwd -1 -salt ihlrowCo and entering an empty password
echo 'root:$1$ihlrowCo$sF0HjA9E8up9DYs258uDQ0:10063:0:99999:7:::' \
    > "$BOOTSTRAPCHROOT/etc/shadow"
echo "root:x:0:0:root:/root:/bin/bash" > "$BOOTSTRAPCHROOT/etc/passwd" 
touch "$BOOTSTRAPCHROOT/etc/group"
echo "archbootstrap" > "$BOOTSTRAPCHROOT/etc/hostname"
test -e "$BOOTSTRAPCHROOT/etc/mtab" || echo "rootfs / rootfs rw 0 0" \
    > "$BOOTSTRAPCHROOT/etc/mtab"
sed -ni '/^[ \t]*CheckSpace/ !p' "$BOOTSTRAPCHROOT/etc/pacman.conf"
sed -i 's/^[ \t]*SigLevel[ \t].*/SigLevel = Never/' \
    "$BOOTSTRAPCHROOT/etc/pacman.conf"
echo "Server = $MIRROR" > "$BOOTSTRAPCHROOT/etc/pacman.d/mirrorlist"

ln -s /usr/lib "$BOOTSTRAPCHROOT/lib"
# Link /lib64. Critical on x86_64, harmless on other architectures.
ln -s /usr/lib "$BOOTSTRAPCHROOT/lib64"

# Link /bin and /sbin to /usr/bin for recent systems
ln -s /usr/bin "$BOOTSTRAPCHROOT/bin" 2>/dev/null || true
ln -s /usr/bin "$BOOTSTRAPCHROOT/sbin"  2>/dev/null || true

mkdir "$BOOTSTRAPCHROOT/mnt"

cp -L /etc/resolv.conf "$BOOTSTRAPCHROOT"/etc/resolv.conf
LC_ALL=C chroot "$BOOTSTRAPCHROOT" pacstrap -d -M -G /mnt $PACKAGES_TARGET

echo "Swapping content of bootstrap and install root..."
mkdir -p "$BOOTSTRAPCHROOT"/bootstrap
for dir in "$BOOTSTRAPCHROOT"/*
do
    if [ ! $dir = "$BOOTSTRAPCHROOT"/bootstrap ]; then
        mv $dir "$BOOTSTRAPCHROOT"/bootstrap
    fi
done

mv "$BOOTSTRAPCHROOT"/bootstrap/mnt/* "$BOOTSTRAPCHROOT"
rm -rf "$BOOTSTRAPCHROOT"/bootstrap
