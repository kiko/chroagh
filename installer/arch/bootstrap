#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a distro-specific bootstrap script, sourced from main.sh, and as such
# has access to all of the variables set by main.sh, namely $tmp (the temporary
# directory), $INSTALLERDIR/$DISTRO, $RELEASE, $ARCH, and $MIRROR.

# This code is loosely based on a script found on the Arch Linux Wiki:
# https://wiki.archlinux.org/index.php/Install_from_Existing_Linux

REPOS='core community extra'

if [ "$ARCH" = 'armv7h' ]; then
    REPOS="$REPOS alarm aur"
fi

# Packages to install in the bootstrap chroot. Dependencies are automatically
# fetched, but finding a suitable virtual package is not supported, so we have
# to list them manually:
# - bash provides sh
# - gawk provides awk
PACKAGES_BOOTSTRAP="arch-install-scripts bash gawk"
# Packages we do not want to install (even if they are dependencies)
PACKAGES_BOOTSTRAP_IGNORE="perl e2fsprogs"

# Packages that are in base, but that we do not want to install in the chroot
# (nothing prevents the user from installing them later on)
PACKAGES_TARGET_IGNORE="cronie device-mapper dhcpcd heirloom-mailx jfsutils \
logrotate lvm2 mdadm netctl pciutils reiserfsprogs systemd-sysvcompat xfsprogs"

LIST="$tmp/list"
FETCHDIR="$tmp/packages"
BOOTSTRAPCHROOT="$tmp/$subdir"

mkdir "$FETCHDIR" "$BOOTSTRAPCHROOT"

echo "Fetching repository packages list..."
# Fetch Arch package database
for REPO in $REPOS; do
    echo "Fetching $REPO..."
    MIRRORBASE="`echo $MIRROR | sed -e "s/\\$repo/$REPO/" \
                                    -e "s/\\$arch/$ARCH/"`"
    curl -# -o "$FETCHDIR/$REPO.db" "$MIRRORBASE/$REPO.db"
    # Create package list in this format: $REPO:package-version
    tar tf "$FETCHDIR/$REPO.db" \
        | sed -n 's|^\(.*\)/$|'"$REPO:"'\1|p' >> "$LIST"
done

# Get the value of a field in the Arch package database
# getvaluedb repo pkgver [desc|depends] field
getdbfield() {
    REPO="$FETCHDIR/$1.db"
    FILE="$2/$3"
    FIELD="$4"
    # Extract the relevant file
    tar xf "$REPO" -O "$FILE" | awk '
        /^$/ { m = 0 }
        m { print }
        /^%'"$FIELD"'%$/ { m = 1 }
    '
    return 0
}

echo "Downloading and extracting packages..."
missing="$PACKAGES_BOOTSTRAP"
installed=""

# Install packages, taking care of dependencies:
# - Install all packages in $missing that have not been installed already.
# - Record all dependencies in $nextmissing
# - Set missing=nextmissing
# - Loop until $missing is empty

while [ -n "$missing" ]; do
    nextmissing=""
    for PACKAGE in $missing; do
        inst='y'
        # Do not install if already installed, or in ignore list
        for IPKG in $installed $PACKAGES_BOOTSTRAP_IGNORE; do
            if [ "$IPKG" = "$PACKAGE" ]; then
                inst='n'
                break
            fi
        done

        if [ "$inst" = 'y' ]; then
            echo "Downloading and installing $PACKAGE..."
            PKG="`grep ":$PACKAGE-[0-9]" "$LIST" | head -n 1`"
            if [ -z "$PKG" ]; then
                echo "Cannot find package $PACKAGE..." 1>&2
                exit 1
            fi
            REPO="`echo $PKG | cut -f 1 -d:`"
            PKGVER="`echo $PKG | cut -f 2 -d:`"
            FILE="`getdbfield "$REPO" "$PKGVER" "desc" "FILENAME"`"
            MIRRORBASE="`echo $MIRROR | sed -e "s/\\$repo/$REPO/" \
                                            -e "s/\\$arch/$ARCH/"`"
            curl -# -o "$FETCHDIR/$FILE" "$MIRRORBASE/$FILE"
            tar xfk "$FETCHDIR/$FILE" -C "$BOOTSTRAPCHROOT"

            # Get list of dependencies (ignore versions)
            ndep="`getdbfield "$REPO" "$PKGVER" "depends" "DEPENDS" \
                     | sed -n -e 's/^\([^<>=]*\).*$/\1/p' | tr '\n' ' '`"

            # Some packages provide virtual packages (e.g. bash provides sh):
            # Add those to the installed list
            nprovides="`getdbfield "$REPO" "$PKGVER" "depends" "PROVIDES" \
                          | tr '\n' ' '`"

            installed="$installed $nprovides $PACKAGE"
            nextmissing="$nextmissing $ndep"
            rm "$BOOTSTRAPCHROOT/.PKGINFO"
        fi
    done

    missing="$nextmissing"
done

# Move databases to bootstrap fs
mkdir -p "$BOOTSTRAPCHROOT/var/lib/pacman/sync"
mv $FETCHDIR/*.db $BOOTSTRAPCHROOT/var/lib/pacman/sync

echo "archbootstrap" > "$BOOTSTRAPCHROOT/etc/hostname"
sed -ni '/^[ \t]*CheckSpace/ !p' "$BOOTSTRAPCHROOT/etc/pacman.conf"
sed -i 's/^[ \t]*SigLevel[ \t].*/SigLevel = Never/' \
    "$BOOTSTRAPCHROOT/etc/pacman.conf"
echo "Server = $MIRROR" > "$BOOTSTRAPCHROOT/etc/pacman.d/mirrorlist"

mkdir "$BOOTSTRAPCHROOT/newroot"

cp -L /etc/resolv.conf "$BOOTSTRAPCHROOT"/etc/resolv.conf

# Synchronize, just in case (should not be necessary as we copied the db files)
LC_ALL=C chroot "$BOOTSTRAPCHROOT" pacman -Sy

# Build a reasonable set of base packages, using pacman's output as reference,
# then remove packages in PACKAGES_TARGET_IGNORE.
allbasepkg="`LC_ALL=C chroot "$BOOTSTRAPCHROOT" pacman -Sg base |
                                        sed -e 's/^base //' | tr '\n' ' '`"

basepkg=""
for PACKAGE in $allbasepkg; do
    inst='y'
    for IPKG in $PACKAGES_TARGET_IGNORE; do
        if [ "$IPKG" = "$PACKAGE" ]; then
            inst=
        fi
    done

    if [ -n "$inst" ]; then
        basepkg="$basepkg $PACKAGE"
    fi
done

echo "Building the chroot with these packets:"
echo "$basepkg"

# Copy package tarballs and databases to final root for a faster installation
mkdir -p "$BOOTSTRAPCHROOT/newroot/var/lib/pacman/sync"
cp -a $BOOTSTRAPCHROOT/var/lib/pacman/sync/*.db \
      $BOOTSTRAPCHROOT/newroot/var/lib/pacman/sync
mkdir -p "$BOOTSTRAPCHROOT/newroot/var/cache/pacman/pkg"
mv $FETCHDIR/* $BOOTSTRAPCHROOT/newroot/var/cache/pacman/pkg

LC_ALL=C chroot "$BOOTSTRAPCHROOT" pacstrap -d -M -G /newroot $basepkg

# Make sure we unmount whatever pacstrap just mounted
# (this is a bug in pacstrap)
for dir in dev/shm dev/pts dev sys proc run tmp ""; do
    umount "$BOOTSTRAPCHROOT/newroot/$dir" 2>/dev/null || true
done

echo "Swapping content of bootstrap and install root..."
mkdir -p "$BOOTSTRAPCHROOT"/bootstrap
for dir in "$BOOTSTRAPCHROOT"/*
do
    if [ ! $dir = "$BOOTSTRAPCHROOT"/bootstrap ]; then
        mv $dir "$BOOTSTRAPCHROOT"/bootstrap
    fi
done

mv "$BOOTSTRAPCHROOT"/bootstrap/newroot/* "$BOOTSTRAPCHROOT"
rm -rf "$BOOTSTRAPCHROOT"/bootstrap
