#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a distro-specific continuation of the prepare.sh script.

PKGEXT='nonsense'
DISTROAKA='arch'

# aurcompile: compile package from AUR
aurcompile() {
    echo "Compiling $1 from AUR..." 1>&2
    # Make sure base-devel and wget are installed
    install base-devel wget
    # Create a user to do the compilation
    if ! id aur > /dev/null 2>&1; then
        useradd aur -r -s /bin/false
    fi
    SUDOERSFILE="/etc/sudoers.d/99-aur-pacman"
    echo "aur ALL = NOPASSWD:/usr/bin/pacman" > "$SUDOERSFILE"
    PACKAGE=$1
    PACKAGE2=`echo $PACKAGE | sed -e 's/\(..\).*/\1/'` #FIXME: do this in shell
    su aur -s /bin/sh -c "
        set -e
        PACKAGE='$PACKAGE'
        PACKAGE2='$PACKAGE2'"'
        TMPDIR="`mktemp -d --tmpdir=/tmp crouton-aur.XXX`"
        cd "$TMPDIR"
        wget "https://aur.archlinux.org/packages/$PACKAGE2/$PACKAGE/$PACKAGE.tar.gz"
        tar vxf "$PACKAGE.tar.gz"
        cd "$PACKAGE"
        pkgver=`sed -n '"'"'s/^pkgver=//p'"'"' PKGBUILD`
        pkgrel=`sed -n '"'"'s/^pkgrel=//p'"'"' PKGBUILD`
        if pacman -Q "$PACKAGE" | grep "^$PACKAGE $pkgver-$pkgrel\$"; then
            echo "Package $PACKAGE already up to date ($pkgver-$pkgrel)."
        else
            makepkg -A -s -i --noconfirm
        fi'
    #FIXME: These 2 lines should be in traps
    rm -rf "$TMPDIR"
    rm "$SUDOERSFILE"
    return 0
}

# install_dist: see install() in prepare.sh for details.
# We ignore the second part of the parameters, that are probably Ubuntu-specific
install_dist() {
    local pkgs='' aurpkgs='' params=''
    if [ "$1" = '--minimal' ]; then
        params='--no-install-recommends'
        shift
    fi
    while [ ! "$#" = 0 ]; do
        if [ "$1" = '--' ]; then
            shift
            break
        fi
        aurstrip=${1#aur:}
        if [ "$aurstrip" = "$1" ]; then
            pkgs="$pkgs $1"
        else
            aurpkgs="$aurpkgs $aurstrip"
        fi
        shift
    done
    if [ -n "$pkgs" ]; then
        pacman -S --noconfirm --needed $pkgs
    fi
    
    if [ -n "$aurpkgs" ]; then
        for aurpkg in "$aurpkgs"; do
            aurcompile $aurpkg
        done
    fi
}


# install_pkg_dist: see install_pkg() in prepare.sh for details.
install_pkg_dist() {
    error 1 'ERROR: install_pkg_dist makes no sense for Arch'
}


# remove_dist: see remove() in prepare.sh for details.
remove_dist() {
    pacman -R --unneeded "$@"
}


# list_uninstalled_dist: see list_uninstalled() in prepare.sh for details.
list_uninstalled_dist() {
    local suffix="$1" pkg
    if [ -n "$suffix" ]; then
        error 1 'list_uninstalled_dist: Non-empty suffix makes no sense for Arch'
    fi
    shift
    for pkg in "$@"; do
        if ! dpkg-query -s "$pkg" 2>/dev/null >/dev/null; then
            echo -n "$pkg "
        fi
    done
}

#FIXME: Here, we should be able to recover the bootstrap

# Fix the keyboard mode early on (this will be called again after dist-upgrade).
fixkeyboardmode
