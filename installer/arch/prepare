#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a distro-specific continuation of the prepare.sh script.

PKGEXT='tar.xz'
DISTROAKA='arch'

# aurcompile <package> <extra makepkg options>: compile package from AUR.
# This should not be a permanent solution, as AUR packages cannot be trusted,
# and may break. Ideally, we would like packages to be pushed to [community].
# We create the user 'aur' to compile the package, giving it sudo access, so
# that dependencies and the package itself can be installed automatically.
aurcompile() {
    local package="$1"
    shift
    echo "Compiling $package from AUR..." 1>&2
    # Make sure base-devel and wget are installed
    install --asdeps base-devel
    install wget

    if ! id aur > /dev/null 2>&1; then
        useradd aur -r -s /bin/false
    fi

    SUDOERSFILE="/etc/sudoers.d/99-aur-pacman"
    echo "aur ALL = NOPASSWD:/usr/bin/pacman" > "$SUDOERSFILE"
    addtrap "rm -f '$SUDOERSFILE'"

    su aur -s /bin/sh -c "
        set -e
        PACKAGE='$package'"'
        PACKAGE2="${PACKAGE%"${PACKAGE#??}"}"
        TMPDIR="`mktemp -d --tmpdir=/tmp crouton-aur.XXX`"
        TRAP="rm -rf '"'"'$TMPDIR'"'"'"
        trap "$TRAP" INT HUP TERM 0
        cd "$TMPDIR"
        wget --no-check-certificate \
            "https://aur.archlinux.org/packages/$PACKAGE2/$PACKAGE/$PACKAGE.tar.gz"
        tar vxf "$PACKAGE.tar.gz"
        cd "$PACKAGE"
        pkgver=`sed -n '"'"'s/^pkgver=//p'"'"' PKGBUILD`
        pkgrel=`sed -n '"'"'s/^pkgrel=//p'"'"' PKGBUILD`
        if pacman -Q "$PACKAGE" 2>/dev/null | \
                    grep "^$PACKAGE $pkgver-$pkgrel\$"; then
            echo "Package $PACKAGE already up to date ($pkgver-$pkgrel)."
        else
            makepkg -A -s -i '"$*"' --noconfirm
        fi'

    rm -f "$SUDOERSFILE"
    undotrap

    return 0
}

# install_dist: see install() in prepare.sh for details.
# We ignore the second part of the parameters, as Arch only pulls required deps.
install_dist() {
    local pkgs='' aurpkgs='' params=''
    while [ "$#" != 0 ]; do
        if [ "$1" = "--minimal" ]; then
            true # Ignore: irrelevant for arch
        elif [ "$1" = "--asdeps" ]; then
            params="--asdeps"
        else
            break
        fi
        shift
    done
    while [ "$#" != 0 ]; do
        if [ "$1" = '--' ]; then
            shift
            break
        fi
        aurstrip=${1#aur:}
        if [ "$aurstrip" = "$1" ]; then
            pkgs="$pkgs $1"
        else
            aurpkgs="$aurpkgs $aurstrip"
        fi
        shift
    done
    if [ -n "$pkgs" ]; then
        pacman -S --noconfirm --needed $params $pkgs
    fi

    if [ -n "$aurpkgs" ]; then
        for aurpkg in $aurpkgs; do
            aurcompile $aurpkg $params
        done
    fi
}


# install_pkg_dist: see install_pkg() in prepare.sh for details.
install_pkg_dist() {
    error 1 'ERROR: install_pkg_dist is not supported on Arch'
}


# remove_dist: see remove() in prepare.sh for details.
remove_dist() {
    if [ "$#" -gt 0 ]; then
        pacman -R "$@"
    fi
}


# list_uninstalled_dist: see list_uninstalled() in prepare.sh for details.
list_uninstalled_dist() {
    local suffix="$1" pkg
    if [ -n "$suffix" ]; then
        error 1 'list_uninstalled_dist: suffix makes no sense on Arch'
    fi
    shift
    for pkg in "$@"; do
        if ! pacman -Q "$pkg" 2>/dev/null >/dev/null; then
            echo -n "$pkg "
        fi
    done
}

# Run boostrap second stage if it hasn't already happened
bootstrappkglist="/crouton-bootstrap-pkg"
if [ -r "$bootstrappkglist" ]; then
    # Force overwritting packages files in the bootstrap, without any sort
    # of dependency checking: this makes sure package content are properly
    # recorded
    pacman -S --nodeps --nodeps --asdeps --noconfirm --force \
        `cat "$bootstrappkglist"`

    # Initialize pacman keyring (i686/x86_64 only)
    if [ "${ARCH#arm}" = "$ARCH" ]; then
        cat 1>&2 <<END
Initializing pacman keyring...
If this gets stuck, generate entropy by moving the mouse around (e.g. do some
random browsing).
END
        pacman-key --init
        pacman-key --populate archlinux
    fi

    # Restore the original /etc/resolv.conf
    if [ -f /etc/resolv.conf.pacorig ]; then
        rm -f /etc/resolv.conf
        mv -f /etc/resolv.conf.pacorig /etc/resolv.conf
    fi

    # Now install a proper set of base packages

    # Packages that are in base, but that we do not want to install in the
    # chroot (nothing prevents the user from installing them later on)
    PACKAGES_TARGET_IGNORE="cronie device-mapper dhcpcd heirloom-mailx \
    jfsutils logrotate lvm2 mdadm netctl pciutils reiserfsprogs \
    systemd-sysvcompat xfsprogs"

    # Only erase mirror if specified (in case pacman fails later on)
    if [ -n "$MIRROR" -a "$MIRROR" != 'unspecified' ]; then
        echo "Server = $MIRROR" > "$BOOTSTRAPCHROOT/etc/pacman.d/mirrorlist"
    fi

    # Synchronize
    pacman -Sy

    # Build a reasonable set of base packages, using pacman's output as reference,
    # then remove packages in PACKAGES_TARGET_IGNORE.
    allbasepkg="`pacman -Sg base | cut -d' ' -f 2`"

    basepkg=""
    for PACKAGE in $allbasepkg; do
        inst='y'
        for IPKG in $PACKAGES_TARGET_IGNORE; do
            if [ "$IPKG" = "$PACKAGE" ]; then
                inst=
            fi
        done

        if [ -n "$inst" ]; then
            basepkg="$basepkg $PACKAGE"
        fi
    done

    echo "Installing these base packages:"
    echo "$basepkg"

    pacman --noconfirm --needed -S $basepkg

    # Make sure all these packages are marked as installed explicitly
    pacman -D --asexplicit $basepkg >/dev/null

    rm -f "$bootstrappkglist"
fi

# Fix the keyboard mode early on (this will be called again after dist-upgrade).
fixkeyboardmode
