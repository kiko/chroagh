#!/bin/sh
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Synchronizes clipboard between X display, leveraging on crouton's WebSocket
# server and Chromium extension to synchronize the clipboard with Chromium OS

VERBOSE='0'

previous=''
current=''
cliptmp="`mktemp "croutonclip.XXX"`"
cliptmp2="`mktemp "croutonclip.XXX"`"
trap "rm -f \"$cliptmp\" \"$cliptmp2\"" INT HUP 0

copyclip() {
    next="$1"

    if [ -z "$current" -o "$current" = "$next" ]; then
        return 0
    fi

    [ -n "$VERBOSE" ] && echo ">>Current: $current>>"

    if [ "$current" = ":0" ]; then
        (
            flock 5
            echo -n R > /tmp/crouton-websocket-in
            cat /tmp/crouton-websocket-out > "$cliptmp2"
        ) 5>/tmp/crouton-websocket-lock
        STATUS="`head -c 1 "$cliptmp2"`"
        if [ "$STATUS" = "R" ]; then
            tail -c +2 "$cliptmp2" > "$cliptmp"
        else
            # Skip Chromium OS
            echo -n "crouton-websocket error: " >&2
            cat "$cliptmp2" >&2
            return 0
        fi
    else
        DISPLAY="$current" xclip -o -sel clip > "$cliptmp"
    fi

    [ -n "$VERBOSE" ] && cat "$cliptmp"

    # Paste clipboard content to current window
    if [ "$next" = ":0" ]; then
        STATUS="`(
            flock 5
            (echo -n W; cat "$cliptmp") > /tmp/crouton-websocket-in
            cat /tmp/crouton-websocket-out
        ) 5>/tmp/crouton-websocket-lock`"

        if [ "$STATUS" != "WOK" ]; then
            # Write failed, skip Chromium OS
            echo -n "crouton-websocket error: $STATUS" >&2
            return 0
        fi
    else
        # Do not override content if it "looks" the same
        # (we might have rich text or other content in the clipboard)
        DISPLAY="$next" xclip -o -sel clip > "$cliptmp2"
        if ! diff -q "$cliptmp" "$cliptmp2" > /dev/null; then
            cat "$cliptmp" | DISPLAY="$next" xclip -i -sel clip
        fi
    fi

    [ -n "$VERBOSE" ] && echo "<<Next: $next<<"

    previous="$current"
    current="$next"
}

# Wait for the websocket server to get connected to the extension
# Timeout after 12 seconds (2*5 seconds + margin)
waitwebsocket() {
    timeout=12
    while [ $timeout -gt 0 ]; do
        [ -n "$VERBOSE" ] && echo "Ping..."
        RND="`head -c 9 /dev/urandom | base64`"
        STATUS="`(
            echo -n "P$RND" > /tmp/crouton-websocket-in
            cat /tmp/crouton-websocket-out
        ) 5>/tmp/crouton-websocket-lock`"

        if [ "$STATUS" = "P$RND" ]; then
            [ -n "$VERBOSE" ] && echo "OK!"
            return 0
        fi
        [ -n "$VERBOSE" ] && echo "$STATUS"
        sleep 1
        timeout=$(($timeout-1))
    done
    echo "Timeout waiting for extension to connect." >&2
}

crouton-websocket >/dev/null 2>&1 &

xmethod="`readlink -f '/etc/X11/xinit/xserverrc'`"
xmethod="${xmethod##*-}"

# Launch xbindkeys for the Chromium OS X server if it isn't running
if [ "$xmethod" = 'xephyr' ]; then
    # Assume current display is Chromium OS
    current=':0'
    # Xephyr version
    host-x11 xev -root -event substructure | mawk -W interactive '
        m {
            if ($6 == "NO") {
                print $4
            }
            m = ""
        }
        /^MapNotify/ {
            m = $1
        }
    ' | {
        waitwebsocket;
        while read line; do
            id="${line%%,}"
            name="`host-x11 xprop -format WM_NAME 8s '\t$0\n' -id "$id" WM_NAME | cut -f 2`"
            if [ "$name" = '"aura_root_0"' ]; then
                display=":0"
            else
                display="`echo "$name" | sed -n -e 's/^\"Xephyr on \(:[0-9]\{1,\}\).*$/\1/p'`"
            fi
            copyclip "$display"
        done
    }
elif [ "$xmethod" = 'x11' ]; then
    # X11 version
    croutonvtmonitor | {
        waitwebsocket
        while read id; do
            process="`ps -o pid= -t "$id" | sed 's/ //g'`"

            if [ -n "$process" ]; then
                display=''
                for lock in /tmp/.X*-lock; do
                    if grep -q -e "^ *$process$" $lock; then
                        display="${lock##/tmp/.X}"
                        display=":${display%%-lock}"
                    fi
                done

                if [ -n "$display" ]; then
                    copyclip "$display"
                fi
            fi
        done  
    }
fi
