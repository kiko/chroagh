#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# xinitrc wrapper for crouton:
#  1. Runs crouton-specific commands
#  2. Runs the provided client (emulating xinit behaviour)
#  3. Runs crouton-specific commands before the server is destroyed

cmd=''
extraargs=''
binary=''

# This part is a translation of what is found in xorg's xinit.c

if [ -z "$1" ] || [ "${1#[/.]}" = "$1" ]; then
    # No client parameter: find .xinitrc if possible, run xterm otherwise
    required=''

    if [ -n "$XINITRC" ]; then
        cmd="$XINITRC"
        required='y'
    elif [ -n "$HOME" ]; then
        cmd="$HOME/.xinitrc"
    fi

    if [ ! -e "$cmd" ]; then
        if [ -n "$required" ]; then
            echo "Warning, no client init file \"$cmd\"" 1>&2
        fi

        # If no client is given, use default command
        cmd="xterm"
        extraargs="-geometry +1+1 -n login"
        # Make sure xterm is executed directly: let sh resolve the path
        binary='y'
    fi
else
    cmd="$1"
    shift
fi

# Run crouton-specific commands:

# Launch the powerd poker daemon
croutonpowerd --daemon &

# Apply the Chromebook keyboard map if installed.
if [ -f '/usr/share/X11/xkb/compat/chromebook' ]; then
    setxkbmap -model chromebook
fi

# Launch key binding daemon
xmethod="`readlink -f '/etc/X11/xinit/xserverrc'`"
xmethod="${xmethod##*-}"

METHOD="$xmethod" xbindkeys -fg /etc/crouton/xbindkeysrc.scm

# Launch xbindkeys for the Chromium OS X server if it isn't running
if [ "$xmethod" = 'x11' ]; then
    running=''
    for p in `ps -C xbindkeys -opid=`; do
        if grep -q 'CROUTON=XINIT' "/proc/$p/environ" 2>/dev/null; then
            running='y'
            break
        fi
    done
    if [ -z "$running" ]; then
        CROUTON='XINIT' METHOD="$xmethod" \
            host-x11 xbindkeys -fg /etc/crouton/xbindkeysrc.scm
    fi
fi

# Pass through the host cursor on xephyr
if [ "$xmethod" = 'xephyr' ]; then
    host-x11 croutoncursor "$DISPLAY" &
fi

# Launch touchegg if it is requested.
toucheggconf='/etc/touchegg.conf'
if [ -f "$toucheggconf" ]; then
    mkdir -p "$HOME/.config/touchegg"
    ln -sf "$toucheggconf" "$HOME/.config/touchegg/"
    touchegg &
fi

# Configure trackpad settings if needed
if synclient >/dev/null 2>&1; then
    case "`awk -F= '/_RELEASE_BOARD=/{print $2}' '/var/host/lsb-release'`" in
        butterfly*) SYNCLIENT="FingerLow=1 FingerHigh=5 $SYNCLIENT";;
    esac
    if [ -n "$SYNCLIENT" ]; then
        synclient $SYNCLIENT
    fi
fi

# Run the client itself if it is executable, otherwise run it in a shell.
ret=0
pid=
if [ -n "$binary" -o -x "$cmd" ]; then
    "$cmd" $extraargs "$@" &
else
    /bin/sh "$cmd" $extraargs "$@" &
fi
pid=$!

# Make sure exit commands are run even if we receive a signal
trap "kill '$pid'" HUP INT
wait "$pid" || ret=$?
trap - HUP INT

# Run crouton-specific commands before the server exits:

echo "Running exit commands..."

# Find the clipboard synchronization daemon
# When read line is executed in croutonclip, a second process is active,
# but only one responds to SIGTERM. Make sure we send the signal to all
# of them
croutonclippids=""
for ccpid in `ps -C croutonclip -opid=`; do
    if grep -q "CROUTON=CORE" "/proc/$ccpid/environ"; then
        croutonclippids="$ccpid $croutonclippids"
    fi
done

if [ -n "$croutonclippids" ]; then
    # Check if we there is another crouton X server running

    # Remove possible .0 in DISPLAY (e.g. :0.0)
    current="`echo $DISPLAY | sed -n -e 's/^\(:[0-9]*\).*$/\1/p'`"

    other=''
    for lock in /tmp/.X*-lock; do
        display="${lock##/tmp/.X}"
        display=":${display%%-lock}"

        xpid="`cat "$lock" | sed 's/ //g'`"

        # Ignore :0 (Chromium OS) and current display
        # Make sure process indicated by lock file is running
        if ! [ "$display" = ':0' -o "$display" = "$current" ] &&
                ps -p "$xpid" >/dev/null 2>&1; then
            echo "Found other: $display" >&2
            other='y'
            break
        fi
    done

    # No other display: kill croutonclip
    if [ -z "$other" ]; then
        echo "Killing croutonclip ($croutonclippids)..." >&2
        kill $croutonclippids
    fi
fi

exit "$ret"
